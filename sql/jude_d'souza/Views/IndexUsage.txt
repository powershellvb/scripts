

SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
;with Vindex as
(
	select i.object_id, i.index_id, i.name, i.type_desc,i.is_primary_key, i.is_unique,i.is_unique_constraint,i.fill_factor,i.is_disabled,i.allow_row_locks,i.allow_page_locks,i.ignore_dup_key,i.has_filter,i.filter_definition
	,indexcols = stuff((select ', '+C.NAME from sys.index_columns IC join sys.columns C on C.OBJECT_ID = IC.OBJECT_ID and C.COLUMN_ID = IC.COLUMN_ID and IC.is_included_column = 0
							where IC.OBJECT_ID = I.OBJECT_ID AND IC.INDEX_ID = I.INDEX_ID order by IC.KEY_ORDINAL for XML PATH ('')),1,2,'')
	,inclcols = stuff((select ', '+C.NAME from sys.index_columns IC join sys.columns C on C.OBJECT_ID = IC.OBJECT_ID and C.COLUMN_ID = IC.COLUMN_ID and IC.is_included_column = 1
						where IC.OBJECT_ID = i.OBJECT_ID AND IC.INDEX_ID = i.INDEX_ID for XML PATH ('')),1,2,'') 
	from sys.indexes as i
	where OBJECTPROPERTY(i.object_id,'IsUserTable') = 1
	--and OBJECT_SCHEMA_NAME(i.object_id)  <> 'cdc'
)
select 
 [object]=db_name()+'.'+object_schema_name(i.object_id)+'.'+object_name(i.object_id), IndexName=isnull(i.name,''), i.object_id,i.index_id , i.type_desc
, PK=i.IS_PRIMARY_KEY,UK=(i.is_unique|i.is_unique_constraint)
, fill_factor=case i.fill_factor when 0 then 100 else i.fill_factor end --,FLT=i.has_filter,filter_definition --,IDK=ignore_dup_key
, IndexColumns=isnull(i.indexcols,'')
, InclColumns=isnull(i.inclcols,'')
--, i.is_disabled --, i.allow_row_locks, i.allow_page_locks
, ps.rows, ps.partitions
, ps.used_pages  -- includes leaf level, nonleaf B-tree pages, IAM pages
, ps.data_pages  -- Nonleaf pages in the B-tree are not included in the count.) IAM (Index Allocation Map) pages are not included 
, nonLeafPages=ps.used_pages-ps.data_pages
, UsedMB=ps.used_pages/128, DataMB=ps.data_pages/128, nonLeafMB=(ps.used_pages-ps.data_pages)/128  -- *8 - KB
, ius.user_seeks , ius.last_user_seek
, ius.user_scans , ius.last_user_scan
, ius.user_lookups , ius.last_user_lookup
, ius.user_updates , ius.last_user_update
, last_stats_update = STATS_DATE(i.OBJECT_ID, i.INDEX_ID)
, rebuildCmd='ALTER INDEX '+i.NAME+' ON '+object_schema_name(i.object_id)+'.'+object_name(i.object_id)+' REBUILD WITH (MAXDOP=1, ONLINE=ON, SORT_IN_TEMPDB=ON)'  --,FILLFACTOR=90
, CreateCI = case when (i.is_unique|i.is_primary_key) = 1 and i.type_desc = 'NONCLUSTERED' then 'ALTER TABLE '+object_schema_name(i.object_id)+'.'+object_name(i.object_id)+' DROP CONSTRAINT '+i.name+'; ALTER TABLE '+object_schema_name(i.object_id)+'.'+object_name(i.object_id)+' ADD CONSTRAINT '+i.name+' PRIMARY KEY CLUSTERED ('+i.indexcols+'); ' else '' end
FROM	Vindex i --inner join sys.objects o on o.object_id = i.object_id and o.name in ('invoiceevents','docqueues','documentslocks','documents','documentposition','docrefby','docuserdefs','docprofileconnection')
left join sys.dm_db_index_usage_stats ius ON ius.DATABASE_ID = DB_ID() AND i.OBJECT_ID = ius.OBJECT_ID AND i.INDEX_ID = ius.INDEX_ID
outer apply (select partitions=count(distinct partition_id),rows=sum(case when au.type=1 then p.rows else 0 end),data_pages=sum(au.data_pages),used_pages=sum(au.used_pages)
	from sys.partitions p 
	inner join sys.allocation_units au on au.container_id = case au.type % 2 when 0 then p.partition_id else p.hobt_id end
	where p.object_id = i.object_id AND p.index_id = i.index_id  group by p.object_id, p.index_id 
) ps
where i.OBJECT_ID = object_id('<schema.table>') and i.name = '<index name>' order by 1,3
--where i.index_id = 0 and (ius.user_seeks+ius.user_scans+ius.user_lookups) > 1000 order by rows desc
OPTION (MAXDOP 1)



--Index usage non-summarized
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
;with Vindex as
(
	select i.object_id, i.index_id, i.name, i.type_desc,i.is_primary_key, i.is_unique,i.is_unique_constraint,i.fill_factor,i.is_disabled,i.allow_row_locks,i.allow_page_locks,i.ignore_dup_key,i.has_filter,i.filter_definition
	,indexcols = stuff((select ', '+C.NAME from sys.index_columns IC join sys.columns C on C.OBJECT_ID = IC.OBJECT_ID and C.COLUMN_ID = IC.COLUMN_ID and IC.is_included_column = 0
							where IC.OBJECT_ID = I.OBJECT_ID AND IC.INDEX_ID = I.INDEX_ID order by IC.KEY_ORDINAL for XML PATH ('')),1,2,'')
	,inclcols = stuff((select ', '+C.NAME from sys.index_columns IC join sys.columns C on C.OBJECT_ID = IC.OBJECT_ID and C.COLUMN_ID = IC.COLUMN_ID and IC.is_included_column = 1
						where IC.OBJECT_ID = i.OBJECT_ID AND IC.INDEX_ID = i.INDEX_ID for XML PATH ('')),1,2,'') 
	from sys.indexes as i
	where OBJECTPROPERTY(i.object_id,'IsUserTable') = 1
	--and OBJECT_SCHEMA_NAME(i.object_id)  <> 'cdc'
)
select 
 [object]=db_name()+'.'+object_schema_name(i.object_id)+'.'+object_name(i.object_id), i.name AS [INDEX_NAME], i.index_id , i.type_desc
, PK=i.IS_PRIMARY_KEY,UK=(i.is_unique|i.is_unique_constraint)
, fill_factor=case i.fill_factor when 0 then 100 else i.fill_factor end --,IDK=ignore_dup_key,FLT=i.has_filter
, i.indexcols
, i.inclcols
, i.is_disabled
, i.allow_row_locks, i.allow_page_locks
, ps.rows, ps.partition_number, ps.data_compression_desc, au.type_desc
, au.used_pages	-- includes leaf level, nonleaf B-tree pages, IAM pages
, au.data_pages -- Nonleaf pages in the B-tree are not included in the count.) IAM (Index Allocation Map) pages are not included 
, nonLeafPages=au.used_pages-au.data_pages
, UsedMB=au.used_pages/128, DataMB=au.data_pages/128, nonLeafMB=(au.used_pages-au.data_pages)/128
, ss.user_seeks , ss.last_user_seek
, ss.user_scans , ss.last_user_scan
, ss.user_lookups , ss.last_user_lookup
, ss.user_updates , ss.last_user_update
, last_stats_update = STATS_DATE(i.OBJECT_ID, i.INDEX_ID)
, rebuildCmd='ALTER INDEX '+i.NAME+' ON '+object_schema_name(i.object_id)+'.'+object_name(i.object_id)+' REBUILD PARTITION='+cast(ps.partition_number as varchar(2))+' WITH (MAXDOP=1, ONLINE=ON, SORT_IN_TEMPDB=ON, DATA_COMPRESSION='+ps.data_compression_desc COLLATE database_default+')'  --,FILLFACTOR=90
--, CreateCI = case when (i.is_unique|i.is_primary_key) = 1 and i.type_desc = 'NONCLUSTERED' then 'ALTER TABLE '+object_schema_name(i.object_id)+'.'+object_name(i.object_id)+' DROP CONSTRAINT '+i.name+'; ALTER TABLE '+object_schema_name(i.object_id)+'.'+object_name(i.object_id)+' ADD CONSTRAINT '+i.name+' PRIMARY KEY CLUSTERED ('+i.indexcols+'); ' else '' end
--, CreateNC = case when (i.is_unique|i.is_primary_key) = 0  then 'DROP INDEX '+i.name+' ON '+object_schema_name(i.object_id)+'.'+object_name(i.object_id)+'; CREATE INDEX '+i.name+' ON '+object_schema_name(i.object_id)+'.'+object_name(i.object_id)+' ('+i.indexcols+'); ' else '' end
FROM	Vindex i --inner join sys.objects o on o.object_id = i.object_id and o.name in ('invoiceevents','docqueues','documentslocks','documents','documentposition','docrefby','docuserdefs','docprofileconnection')
left join sys.partitions ps on ps.object_id = i.object_id AND ps.index_id = i.index_id 
left join sys.allocation_units au on au.container_id = case au.type % 2 when 0 then ps.partition_id else ps.hobt_id end and au.type=1 -- IN_ROW_DATA:- distinct list
left join sys.dm_db_index_usage_stats ss ON ss.DATABASE_ID = DB_ID() AND i.OBJECT_ID = ss.OBJECT_ID AND i.INDEX_ID = ss.INDEX_ID
where OBJECTPROPERTY(i.OBJECT_ID,'IsUserTable') = 1 
	and i.OBJECT_ID = object_id('dbo.DimDate')
--	and i.index_id = 1 
--	and i.name in ('ndxFactStaffUtilATDtlCCPEntryDate')
--	and i.has_filter = 1
--	and ((i.allow_row_locks|i.allow_page_locks) = 0 or ignore_dup_key = 1)
--	and ps.data_compression > 0
order by fill_factor
OPTION (MAXDOP 1)



--  Deep-dive into Index Operational stats

SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
SELECT  
 DB_NAME() AS [DB]
 , SCHEMA_NAME(O.schema_id)+'.'+O.NAME AS [objectName] 
 , I.NAME AS [indexName] , I.type_desc --, I.TYPE
 , FileGroupName=fg.name, FileName=f.name
 , PK=I.is_primary_key,UK=(i.is_unique|i.is_unique_constraint) --,IDK=ignore_dup_key
 , i.allow_row_locks, i.allow_page_locks, i.is_disabled
 , i.fill_factor 
 , FLT=i.has_filter, i.filter_definition
 , [index_columns]  = stuff((select ', '+C.NAME from sys.index_columns IC join sys.columns C on C.OBJECT_ID = IC.OBJECT_ID and C.COLUMN_ID = IC.COLUMN_ID and IC.is_included_column = 0
							where IC.OBJECT_ID = I.OBJECT_ID AND IC.INDEX_ID = I.INDEX_ID order by IC.KEY_ORDINAL for XML PATH ('')),1,2,'')
 , included_columns = stuff((select ', '+C.NAME from sys.index_columns IC join sys.columns C on C.OBJECT_ID = IC.OBJECT_ID and C.COLUMN_ID = IC.COLUMN_ID and IC.is_included_column = 1
							where IC.OBJECT_ID = I.OBJECT_ID AND IC.INDEX_ID = I.INDEX_ID for XML PATH ('')),1,2,'')
-- , DB_ID() AS database_id , I.object_id
 , I.index_id
-- , ps.partition_number
 , ps.row_count
 , ps.in_row_data_page_count  -- Nonleaf pages in the B-tree are not included in the count.) IAM (Index Allocation Map) pages are not included 
 , ps.used_page_count --, size_MB=ps.used_page_count / 128-- includes leaf level, nonleaf B-tree pages, IAM pages
 , ps.lob_used_page_count -- out-of-row text, ntext, image, varchar(max), nvarchar(max), varbinary(max), and xml columns within the partition. IAM pages are included.
 , ps.row_overflow_used_page_count -- row-overflow varchar, nvarchar, varbinary, and sql_variant columns within the partition. IAM pages are included.
--	, ps.reserved_page_count, ps.in_row_reserved_page_count, ps.lob_reserved_page_count, ps.row_overflow_reserved_page_count
 , ss.user_seeks , ss.last_user_seek
 , ss.user_scans , ss.last_user_scan
 , ss.user_lookups , ss.last_user_lookup
 , ss.user_updates , ss.last_user_update
 , os.range_scan_count, os.singleton_lookup_count -- includes every single row seek and Clustered index lookup
 , os.forwarded_fetch_count
	--, os.leaf_insert_count,os.leaf_update_count,OS.leaf_delete_count,os.leaf_allocation_count
	--, os.nonleaf_insert_count, os.nonleaf_update_count, OS.nonleaf_delete_count, os.nonleaf_allocation_count
	--, os.lob_fetch_in_pages, os.row_overflow_fetch_in_pages, os.column_value_push_off_row_count
	--, os.row_lock_count, os.row_lock_wait_count --,[Rowblock %]=cast (100.0 * row_lock_wait_count / (1 + row_lock_count) as numeric(15,2))
	--, os.row_lock_wait_in_ms --,[AvgRLockWaitsMS]=cast (1.0 * row_lock_wait_in_ms / (1 + row_lock_wait_count) as numeric(15,2))
	--, os.page_lock_count,os.page_lock_wait_count --,[Pageblock %]=cast (100.0 * page_lock_wait_count / (1 + page_lock_count) as numeric(15,2))
	--, os.page_lock_wait_in_ms --,[AvgPLockWaitsMS]=cast (1.0 * page_lock_wait_in_ms / (1 + page_lock_wait_count) as numeric(15,2))
	--, os.index_lock_promotion_attempt_count, os.index_lock_promotion_count
	--, os.page_latch_wait_count, os.page_latch_wait_in_ms --,[AvgLatchWaitsMS]=cast (1.0 * page_latch_wait_in_ms / (1 + page_latch_wait_count) as numeric(15,2))
	--, os.page_io_latch_wait_count, os.page_io_latch_wait_in_ms --,[AvgIOLatchWaitsMS]=cast (1.0 * page_io_latch_wait_in_ms / (1 + page_io_latch_wait_count) as numeric(15,2))
 , last_stats_update = STATS_DATE(I.OBJECT_ID, I.INDEX_ID)
 , create_datetime = getdate()
FROM	sys.indexes I 
inner join sys.objects O ON O.OBJECT_ID = I.OBJECT_ID
inner join sys.filegroups fg on fg.data_space_id = i.data_space_id inner join sys.sysfiles f on f.groupid = fg.data_space_id
left join sys.dm_db_partition_stats ps on ps.object_id = I.object_id AND ps.index_id = I.index_id 
-- only lists tables and indexes that appear in a query plan and only when that query plan is actually executed
left join sys.dm_db_index_usage_stats SS ON SS.DATABASE_ID = DB_ID() AND I.OBJECT_ID = SS.OBJECT_ID AND I.INDEX_ID = SS.INDEX_ID
-- only lists tables that currently exist in SQL Server's metadata cache
left join sys.dm_db_index_operational_stats(db_id(), NULL, NULL, NULL) OS  ON I.OBJECT_ID = OS.OBJECT_ID AND I.INDEX_ID = OS.INDEX_ID and os.partition_number = ps.partition_number
where o.is_ms_shipped = 0 --OBJECTPROPERTY(I.OBJECT_ID,'IsUserTable') = 1 
--	and not (O.schema_id = SCHEMA_ID('cdc') or O.schema_id = SCHEMA_ID('replication') )
	and O.object_id = OBJECT_ID('COLL.SystemWideMutex') -- and I.index_id = 1
--	and (I.TYPE=1 or I.name in ('ndxdwtblFactAssgMvmt_GDW'))
--	and ps.partition_number = 9
--	and i.has_filter = 1 -- When filtered, the filtered column must appear in the list of searchable or preferably included columns in order to avoid a lookup
--	and ((i.allow_row_locks|i.allow_page_locks) = 0) -- Lock escalation results if we dont allow row or page locks
--	AND I.IS_PRIMARY_KEY = 0 AND I.TYPE = 2 AND USER_SEEKS = 0 AND USER_SCANS = 0  -- Unused NC index
--	and I.TYPE = 2 --and isnull(ps.row_count,0) > 0
--	AND ((I.TYPE > 0 AND USER_SEEKS = 0) OR USER_SCANS > 0 OR USER_LOOKUPS > 0)
--	and (row_lock_wait_count+page_lock_wait_count) > 0
--	and ((i.allow_row_locks | i.allow_page_locks) = 0 or ignore_dup_key = 1)
ORDER BY --[LAST STATS UPDATE] --cast (100.0 * (row_lock_wait_count+page_lock_wait_count) / (1 + (row_lock_wait_count+page_lock_wait_count)) as numeric(15,2))
1,2,3,ps.partition_number
--		 USER_SCANS desc, USER_LOOKUPS desc
OPTION (MAXDOP 1)


-- Overlapping indexes
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
;with indexcols as
(
	select i.object_id, i.index_id, i.name,i.type,i.type_desc,PK=i.is_primary_key,UC=i.is_unique_constraint,UK=(i.is_unique|i.is_unique_constraint),disabled=i.is_disabled,filtered=i.has_filter
	,indexcols = stuff((select ', '+C.NAME from sys.index_columns IC join sys.columns C on C.OBJECT_ID = IC.OBJECT_ID and C.COLUMN_ID = IC.COLUMN_ID and IC.is_included_column = 0
							where IC.OBJECT_ID = i.OBJECT_ID AND IC.INDEX_ID = i.INDEX_ID order by IC.KEY_ORDINAL for XML PATH ('')),1,2,'')
	,included = stuff((select ', '+C.NAME from sys.index_columns IC join sys.columns C on C.OBJECT_ID = IC.OBJECT_ID and C.COLUMN_ID = IC.COLUMN_ID and IC.is_included_column = 1
						where IC.OBJECT_ID = i.OBJECT_ID AND IC.INDEX_ID = i.INDEX_ID for XML PATH ('')),1,2,'') 
	from sys.indexes as i
	where OBJECTPROPERTY(i.object_id,'IsUserTable') = 1 and i.INDEX_ID > 0
	--and i.object_id != object_id('dbo.tblEHCP_UDF_Lookup') --< EDIT to exclude false positives
)
select [Object]=db_name()+'.'+object_schema_name(i1.object_id)+'.'+object_name(i1.object_id)
 , [index]=i1.name,i1.type,PK=i1.PK,i1.UK,i1.filtered,i1.disabled
 , [indexColumns]  = i1.indexcols, i1.included
 , partialDuplicate=i2.name,i2.type,PK=i2.PK,i2.UK,i2.filtered,i2.disabled
 , indexColumns  = i2.indexcols,i2.included
 , ps.rows,ps.used_pages,size_MB=ps.used_pages/128,ps.partitions -- Duplicate index stats
 , ss.user_seeks,ss.user_scans,ss.user_updates
 --, DropDuplicate = case when len(i1.indexcols) >= len(i2.indexcols) 
	--			then case when (i2.UC|i2.PK) = 1 then 'ALTER TABLE '+object_schema_name(i1.object_id)+'.'+object_name(i1.object_id)+' DROP CONSTRAINT '+i2.name+';' else 'DROP INDEX '+i2.name+' ON '+object_schema_name(i1.object_id)+'.'+object_name(i1.object_id)+';' end
	--			else case when (i1.UC|i1.PK) = 1 then 'ALTER TABLE '+object_schema_name(i1.object_id)+'.'+object_name(i1.object_id)+' DROP CONSTRAINT '+i1.name+';' else 'DROP INDEX '+i1.name+' ON '+object_schema_name(i1.object_id)+'.'+object_name(i1.object_id)+';' end
	--		end
 --, CreateNC = case when len(i1.indexcols) >= len(i2.indexcols) 
	--			then 'CREATE ' + (case when i1.UK = 1 then 'UNIQUE ' else '' end) + 'NONCLUSTERED INDEX '+i1.name+' ON '+object_schema_name(i1.object_id)+'.'+object_name(i1.object_id)+' ('+i1.indexcols+')'+iif(i1.included is not null,' INCLUDE('+i1.included+')','')+';'
	--			else 'CREATE ' + (case when i2.UK = 1 then 'UNIQUE ' else '' end) + 'NONCLUSTERED INDEX '+i2.name+' ON '+object_schema_name(i1.object_id)+'.'+object_name(i1.object_id)+' ('+i2.indexcols+')'+iif(i2.included is not null,' INCLUDE('+i2.included+')','')+';'
	--		end
 --, CreateCI = case when i1.UK = 1 and i1.type_desc = 'NONCLUSTERED' then 'ALTER TABLE '+object_schema_name(i1.object_id)+'.'+object_name(i1.object_id)+' DROP CONSTRAINT '+i1.name+'; ALTER TABLE '+object_schema_name(i1.object_id)+'.'+object_name(i1.object_id)+' ADD CONSTRAINT '+i1.name+' PRIMARY KEY CLUSTERED ('+i1.indexcols+'); ' else '' end
from indexcols as i1
join indexcols as i2 on i2.object_id = i1.object_id and i2.index_id > i1.index_id 
	and (i1.indexcols like i2.indexcols+'%' or i2.indexcols like i1.indexcols+'%')
	--and (i1.indexcols LIKE LEFT(i2.indexcols, LEN(i1.indexcols)) or i2.indexcols LIKE LEFT(i1.indexcols, LEN(i2.indexcols)))
left join sys.dm_db_index_usage_stats SS ON SS.DATABASE_ID = DB_ID() AND i2.OBJECT_ID = SS.OBJECT_ID AND i2.INDEX_ID = SS.INDEX_ID 
outer apply (select partitions=count(partition_id),rows=sum(p.row_count),used_pages=sum(p.used_page_count)
	from sys.dm_db_partition_stats p
	where p.object_id = i2.object_id AND p.index_id = i2.index_id  group by p.object_id, p.index_id 
) ps
--where ps.rows > 1000 --< UNCOMMENT to see tables with rows 
order by rows desc,1,i1.index_id
OPTION (MAXDOP 1);

/* Notes on overlapping indexes
The script uses pattern matching, so CI on intColumn1 will match an NC on intColumn12 and flag the NC as a duplicate, when clearly it is not.
Unfortunately I have not found a work-around to cover this condition.
Apart from this false positive, everything that is displayed is relevant to your decision to keep an index or disable it (delete later).
I have seen NC index definitions that INCLUDE the CI key.  That is unnecessary, since the CI inherently exists in every NC row.

An NC that has the CI key as its first indexed column(s) is mostly a waste of space,
Generally PKs and UKs ( Unique keys) are best left alone, unless an NC UK is an exact copy of the CI PK 
...unless the NC is much narrower than the CI and is the target of a full scan or a large range seek and data (# of index pages) read,
has a big performance impact.
*/